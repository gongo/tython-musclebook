肉体言語 Tython とは
--------------------

早速プログラミング…といきたいところですが、
まずは Tython に関する前提知識が必要です。
従来の開発の問題点とは。
体を使ってプログラミングするということはどういうことなのか。
本章で心構えをしていきましょう。

### 開発者と入力デバイスの関係

前章で述べたとおり、従来のソフトウェア開発で
主に使われている入力デバイスといえば、キーボードとマウスです。
これら二つのデバイスは下記に示すとおり、
人の手にフィットする操作感が得られるため、
開発者の設計効率を飛躍的に高めます。

- キーボード
    - アクション「キーを押す」
    - アクション「キーを離す」
    - 各種キーコードの組み合わせ
- マウス
    - アクション「ドラッグ&ドロップ」
    - アクション「左右中央シングル/ダブルクリック」
    - カーソルを直感的に操作可能

優秀なデバイスではありますが、安全かつ効率的に使うには、
作業場所を「水平」及び「平坦」に保たなければなりません。
キーボードの形状やマウスの移動検知手法は、
それらを配置する場所(例えばデスク)が水平であり、
かつ起伏のない平坦なスペースであることが想定されています。

そして最も重大な問題として、開発者の身体に与える影響です。
キーボードやマウスを使用する場合、体勢がどうしても固定されがちになり、
長時間にもおよぶ開発は静かに、しかし確実に私たちの体にダメージを残します。
特に肩や首、腰にかかる負担は相当なもので、
そこから頭痛、歩行困難を引き起し日常生活にまで影響を与えてしまいます。

ソフトウェア開発において重視すべきは、人月計算でも開発モデルでもありません。
新たなる製品を生み出していく私たちの体を守る入力デバイスなのです。


### 設計 + 製造 ( + 入力デバイス )

ソフトウェア開発とは「設計」、「製造」という工程に分類でき、
これらは現存するソフトウェア開発(プログラミング)言語の根源となっています。
Tython も例外ではありませんが、他の言語と異なる点が一つあります。
それは、「開発者の肉体そのものを入力デバイスとする」という点です。
つまり Tython は、ソフトウェア開発において重要とされる入力デバイスを
言語仕様として備えているのです。

### Tython の特徴

前述のとおり、キーボードやマウスの操作範囲は「水平・平坦」であり、
開発者の操作感が二次元的な動きに限定されてしまうことを表しています。
これに対し、Tython による開発では固形デバイスを必要としません。
言うなれば両腕・両足が届く三次元空間内全てが「入力デバイス」と言えます。
三次元を認識して生きる私たちであれば、誰でも自然に使うことができます。

また、操作範囲が三次元に広がったことで、開発者の体の固定化も抑えられます。
「腕を前に突き出す」、「足を蹴り上げる」、「体を回転させる」といった入力を行うことで、
筋肉的、骨格的なリフレッシュ効果が得られます。
